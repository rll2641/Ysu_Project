안녕하십니까 ai컴퓨터공학과 1학년 조지훈입니다

인공지능의 융합을 통한 블록체인 발전 전망 발표 
및 코인자동매매프로젝트 시작하겠습니다.

현재 클라우드 서버로 인터넷상에 개인용 서버에 파일 및 정보를 저장하는
시스템이 많이 상용화 되었습니다. 하지만 요즘 해킹에 따른 개인정보 노출
이 있듯이 보안 시스템에 대한 중요도가 더욱 높아지는 추세입니다.

이런 위협에서 안전하게 시스템을 운영할 수 있는 방법이 무엇이 있을까?

그 기술중에 하나가 바로 블록체인입니다.
만약 어떤 시스템이 중앙 서버로 구동 된다면 해커들은 중앙서버만 공격을 하면 됩니다. 왜냐하면 모든 데이터는 중앙서버에 집중되어 있고 공격지점이 단 한개이기
때문입니다. 그래서 중앙서버의 보안을 철처히 하려면 백업서버를 둬야하고 그 기술력도 좋아야하기 때문에 많은 투자가 필요합니다.

하지만 블록체인은 블록들이 체인형태로 연결되어 있고, 그것들이 서로 유기적이기 때문에 정보를 변조하기 매우 어렵습니다. 이 뜻은 사용자는 블록체인에 저장되어 있는 정보를 신뢰할 수 있다는 점입니다. 그리고 이렇게 신뢰성이 보장되니
비효율적인관리체계가 필요 없어지며 중간 수수료가 사라지게 됩니다.
그리고 블록체인은 중앙서버 없이 P2P분산서버에서 구동되는 시스템입니다.
또한 모든 데이터들이 복사되어 노드들 피시에 저장되어 있습니다. 따라서
시스템을 공격하기 위해선 절반이상의 노드를 해킹해야하며 이 행동은 너무많은
시간과 불필요한 행동을 반복하게 됩니다. 그래서 블록체인의 기술이 효율이 좋습니다.

앞으로 블록체인의 기술이 좋아질 수록 이 기술은 많은 곳에서 유용하게 
쓰일 것입니다. 

자 이제 제가만든 코인자동매매 프로젝트 발표를 시작하겠습니다.

이 프로젝트를 개발하게 된 동기는 실생활에서도 이 프로그램이 쓰일 수
있으며 다른 사람의 코드를 분석하는 일도 필요한 작업이고 
웹서버와의 연결 하는 방법을 알기 위함입니다.

소스 코드를 보기전에 현재 자료를 보시면 pyupbit라고 업비트모듈을
제공해주는 깃허브 사이트입니다.참고는 여기에서 하시면 되겠습니다.

이제 소스 코드를 보겠습니다. 

먼저 IMPORT pyupbit,datetime,time으로 모듈을 불러 왔습니다.
여기서 pyupbit는 코인자동매매를 할 때 업비트에서 하기 위해
업비트의 깃허브에서 제공하는 모듈을 불러왔습니다. datetime과 time모듈은 timedelta라는 함수로 날짜와 시간을 쓰기위해 불러왔습니다.

access와 secret 변수가 있는데 여기에 자신의 업비트 api키를 받아서
이 변수에 대입을 해줍니다.  이 두개의 변수는 곧 자신의 아이디 비밀번호가 
되는 겁니다.

이제 def get-start_time 함수를 보겠습니다. 이 함수는 프로그램의 시작시간을
구하기 위해 쓰인 함수입니다.
 인자를 보면 인자로 ticker을 받는데 여기서 ticker은 코인의 종류입니다. 예로 비트코인,리플,이더리움 등이 있습니다. 12번행을 보시면 df라는 변수에 pyupbit.get_ohlcv함수가 있는데 get_ohlcv는 매개변수로 ticker,interval,count를
받는데 차례대로 코인의종류,시간,하루단위날짜를 받습니다.
ticker에 아무것도 입력하지않으면 비트코인이 interval에 day를 입력하면 
아침 9시의 시간이 count에 1을 넣으면 하루단위의 날짜입니다.
따라서 df라는 변수에 아침9시의 시간을 받습니다. 
아침9시로 설정한 이유는 업비트의 하루단위가 아침9시로 설정되어 있기 때문입니다. 저는 자동매매 시작을 오후3시로 설정하기 위해 변수df값 중 첫번째 값을 받아오고 플러스6시간을 해줍니다 이렇게되면 오후3시부터 자동매매를 진행하는
값이 설정되었습니다.

def get_target_price(ticker,k) 
함수의 핵심은 low_price라는 변수에 df.iloc[0,2]이라는 함수인데
df의 값은 데이터프레임으로서 세로중첫번째 가로중 세번째의 값을 받아와서
저장해줍니다. 그 값은 저가를 나타내주고 잇는데 쉽게 말하자면 
df.iloc을 통해 저가를 변수에 저장해주는 겁니다.
그리고 target_price는 제가 지정한 매수 목표가 입니다.
단순하게 저가에 실수를 곱해 저가의 몇 퍼센트 만큼이 제가 지정한 매수 목표가입니다.

def get_current_pric 함수는
get_oderbook의 함수를 통해 내가 원하는 코인의
현재 가격을 조회하는 함수입니다.

def get_balance 함수는
get_balance라는 함수를 통해 보유중인 모든 암호화폐의 잔고 및 단가
정보를 딕셔너리로 조회합니다.  

37번행의 b 딕셔너리 값중 key의 값이 currency이고 value의 값이
ticker 즉 비트코인이 맞고 balance의 값이 거짓이 아니면
float형태의 값을 리턴해주게 됩니다.

46번행은 아까 본 access와 secret으로 업비트에 로그인을 해줍니다.


50번행부터 이 프로젝트의 핵심입니다.

무한루프 안에 try except 로 예외처리를 해주었습니다.
간략하게 설명하면 코드실행중 발생하는 에러를 중단하지않고 계속
실행해주는 코드입니다.

now변수에 datetime모듈안에 datetime클래스의 now라는 함수를 반환하는데
현재 시간을 반환해줍니다. start_time에는 아까 get_start_time함수의 리터값을
대입해주고 end_time은 자동매매가 끝나는 시간을 설정해줬습니다.

60번행부터 시작시간 9시부터 현재시간이 아침8시 사이면 자동매매가 이루어
지는 조건문입니다. 매수목표가 설정과 현재가를 조회 해주고
목표 매수가가 현재가 보다 낮을때 매수를 해주는 조건문을 설정합니다.
그리고 내 원화가 5000원 이상이면 매수를 해줍니다. 수수료가 0.05퍼센트이기
때문에 수수료도 포함시켜줍니다.
70번행은 매도타이밍을 설정해주는 조건문인데 매수목표가에 1.02를 곱해주고
그가격이 현재가보다 낮을때 매도를 해줍니다, 즉 2퍼센트씩 먹고 빠지는 매매입니다. 
그리고 내 비트코인 잔고가 최소금액인 0.00011비트를 넘으면 전량을 매도합니다
그리고 나머지 시간 아침8시부터 오후3시까지 프로그램을 대기상태로 전환합니다.
이렇게 해서 비트코인자동매매프로젝트가 끝났습니다.

다음 화면은 제가 이프로그램을 이용해서 매매를 진행한 사진입니다.
정상적으로 진행되는걸 확인했습니다.

그리고 이 프로그램은 aws ec2라는 가상머신에서 백그라운드로 실행을 해주었습니다. 

이렇게 기말프로젝트발표가 끝났습니다. 감사합니다.




